import { botT, ctxT } from "../types/telegramType";
import { sleep } from "../utils/functions";
import { UserModel } from "../models/user.model";
import { InfoModel } from "../models/info.model";
import cron from "node-cron";
import { GroupModel } from "../models/group.model";
export class TelegramService {
  constructor(private readonly bot: botT) {
    this.init();
  }

  async init() {
    cron.schedule("0 0 * * *", this.reloadAll, {
      timezone: "Europe/Moscow",
    });

    this.bot.start(async (ctx) => {
      console.log(ctx.from);
      console.log(ctx.chat);

      await ctx.reply(
        "–ó–¥–æ—Ä–æ–≤–∞, –ø–∏–¥–æ—Ä—ã –∏ –∫—Ä–∞—Å–∞–≤—á–∏–∫–∏! –ü—Ä–∏—è—Ç–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≤–∞—à–µ–π –±–µ—Å–µ–¥–µ!"
      );
      await this.bot.telegram.setMyCommands(
        [
          { command: "/reg", description: "–ß—Ç–æ–±—ã —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ." },
          { command: "/delete", description: "–ß—Ç–æ–±—ã —Å–±–µ–∂–∞—Ç—å —Å –ø–æ–ª—è –±–æ—è." },
          {
            command: "/run",
            description:
              "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω —É—Å–∞—Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è.",
          },
          {
            command: "/pidor",
            description:
              "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω —É—Å–∞—Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ –ø–∏–¥–æ—Ä –¥–Ω—è.",
          },
          { command: "/stats", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞." },
          { command: "/pidorstats", description: "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã –ø–∏–¥–æ—Ä–∞." },
        ],
        { scope: { type: "all_private_chats" } }
      );
      await this.createGroup(ctx.chat);
    });

    setInterval(async () => {}, 60 * 60 * 1000);

    this.bot.command("reg", async (ctx) => {
      await this.createUser(ctx);
      ctx.reply("–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –≤ –∏–≥—Ä–µ");
    });

    this.bot.command("delete", async (ctx) => {
      await this.deleteUser(ctx);
      ctx.reply("–û—Ç–ª–∏—á–Ω–æ, —Ç—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞–≤—Å—Ç–≤—É–µ—à—å –≤ –∏–≥—Ä–µ");
    });

    this.bot.command("run", async (ctx) => {
      const { id } = ctx.chat;
      const prevCoolDay = await this.currentCoolOfTheDay(id);
      if (!prevCoolDay) {
        const coolDay = await this.getCoolOfTheDay(id);
        if (!coolDay) {
          ctx.reply("–í–ù–ò–ú–ê–ù–ò–ï üî•");
          await sleep(3000);
          ctx.reply("–°–ü–ê–°–ò–ë–û –ó–ê –í–ù–ò–ú–ê–ù–ò–ï üî•");
          return;
        }
        const { last_name, first_name, username } = coolDay;
        ctx.reply("–ö–†–£–¢–ò–ú –ë–ê–†–ê–ë–ê–ù");
        await sleep(2000);
        ctx.reply("–ò—â–µ–º –∫—Ä–∞—Å–∞–≤—á–∏–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ");
        await sleep(2000);
        ctx.reply("–ì–∞–¥–∞–µ–º –Ω–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–∞—Ö üìä");
        await sleep(2000);
        ctx.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É–Ω–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø üåñ");
        await sleep(2000);
        ctx.reply("–õ—É–Ω–Ω–∞—è –ø—Ä–∏–∑–º–∞ –¥–∞–π –º–Ω–µ —Å–∏–ª—É üí´");
        await sleep(2000);
        ctx.reply("–°–ï–ö–¢–û–† –ü–†–ò–ó –ù–ê –ë–ê–†–ê–ë–ê–ù–ï üéØ");
        await sleep(2000);
        let fullName;
        if (first_name && last_name) {
          fullName = `${last_name} ${first_name}`;
        } else if (first_name) {
          fullName = first_name;
        } else if (last_name) {
          fullName = last_name;
        }
        ctx.reply(`üéâ –°–µ–≥–æ–¥–Ω—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è - ${fullName} (@${username})`);
        return;
      }
      const { last_name, first_name, username } = prevCoolDay;
      let fullName;
      if (first_name && last_name) {
        fullName = `${last_name} ${first_name}`;
      } else if (first_name) {
        fullName = first_name;
      } else if (last_name) {
        fullName = last_name;
      }
      ctx.reply(`üéâ –°–µ–≥–æ–¥–Ω—è –∫—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è - ${fullName} (@${username})`);
      return;
    });

    this.bot.command("pidor", async (ctx) => {
      const { id } = ctx.chat;
      const prevPidorDay = await this.currentPidorOfTheDay(id);
      if (!prevPidorDay) {
        const pidorDay = await this.getPidorOfTheDay(id);
        if (!pidorDay) {
          ctx.reply("–í–ù–ò–ú–ê–ù–ò–ï üî•");
          await sleep(3000);
          ctx.reply("–°–ü–ê–°–ò–ë–û –ó–ê –í–ù–ò–ú–ê–ù–ò–ï üî•");
          return;
        }
        const { last_name, first_name, username } = pidorDay;
        ctx.reply("–í–ù–ò–ú–ê–ù–ò–ï üî•");
        await sleep(2000);
        ctx.reply("–§–ï–î–ï–†–ê–õ–¨–ù–´–ô üîç –†–û–ó–´–°–ö –ü–ò–î–û–†–ê üö®");
        await sleep(2000);
        ctx.reply("4 - —Å–ø—É—Ç–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω üöÄ");
        await sleep(2000);
        ctx.reply("3 - —Å–≤–æ–¥–∫–∏ –ò–Ω—Ç–µ—Ä–ø–æ–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã üöì");
        await sleep(2000);
        ctx.reply("2 - —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –æ–ø—Ä–æ—à–µ–Ω—ã üôÖ");
        await sleep(2000);
        ctx.reply("1 - —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω üôÄ");
        await sleep(2000);

        let fullName;
        if (first_name && last_name) {
          fullName = `${last_name} ${first_name}`;
        } else if (first_name) {
          fullName = first_name;
        } else if (last_name) {
          fullName = last_name;
        }
        ctx.reply(`üéâ –°–µ–≥–æ–¥–Ω—è –ü–ò–î–û–† üåà –¥–Ω—è - ${fullName} (@${username})`);
        return;
      }
      const { last_name, first_name, username } = prevPidorDay;
      let fullName;
      if (first_name && last_name) {
        fullName = `${last_name} ${first_name}`;
      } else if (first_name) {
        fullName = first_name;
      } else if (last_name) {
        fullName = last_name;
      }
      ctx.reply(`üéâ –°–µ–≥–æ–¥–Ω—è –ü–ò–î–û–† üåà –¥–Ω—è - ${fullName} (@${username})`);
      return;
    });

    this.bot.command("stats", async (ctx) => {
      const cools: { [key: number]: number } = {};
      const infoList: (number | null | undefined)[] = (
        await InfoModel.find({ group_id: ctx.chat.id }, "currentCool")
      )
        .map((info) => info.currentCool)
        .filter(
          (value) =>
            typeof value === "number" && value !== null && value !== undefined
        );

      infoList.forEach((info) => {
        if (info) {
          if (cools.hasOwnProperty(info)) {
            cools[info] += 1;
          } else {
            cools[info] = 1;
          }
        }
      });

      const coolsArray = Object.entries(cools);

      // Sort the array based on the values in descending order
      coolsArray.sort((a, b) => b[1] - a[1]);

      // Convert the sorted array back into an object
      let message = "";
      let cnt = 1;
      for (const cool of coolsArray) {
        const user = await UserModel.findOne({ user_id: cool[0] });
        message += `${cnt++}) @${user?.username} - ${cool[1]} —Ä–∞–∑(–∞)\n`;
      }

      ctx.reply("üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö—Ä–∞—Å–∞–≤—á–∏–∫ –î–Ω—è\n" + message);
    });

    this.bot.command("pidorstats", async (ctx) => {
      const pidors: { [key: number]: number } = {};
      const infoList: (number | null | undefined)[] = (
        await InfoModel.find({ group_id: ctx.chat.id }, "currentPidor")
      )
        .map((info) => info.currentPidor)
        .filter(
          (value) =>
            typeof value === "number" && value !== null && value !== undefined
        );
      console.log(infoList);
      infoList.forEach((info) => {
        if (info) {
          if (pidors.hasOwnProperty(info)) {
            pidors[info] += 1;
          } else {
            pidors[info] = 1;
          }
        }
      });
      const pidorsArray = Object.entries(pidors);

      // Sort the array based on the values in descending order
      pidorsArray.sort((a, b) => b[1] - a[1]);
      console.log(pidorsArray);
      // Convert the sorted array back into an object
      let message = "";
      let cnt = 1;
      for (const pidor of pidorsArray) {
        const user = await UserModel.findOne({ user_id: pidor[0] });
        message += `${cnt++}) @${user?.username} - ${pidor[1]} —Ä–∞–∑(–∞)\n`;
      }

      ctx.reply("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã üåà–ü–ò–î–û–† –î–Ω—è\n" + message);

      this.bot.command("gnidastats", async (ctx) => {
        ctx.reply("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!");
      });
    });
  }

  async createGroup(chat: any) {
    if (chat.type === "group") {
      const existingGroup = await GroupModel.findOne({ group_id: chat.id });

      if (!existingGroup) {
        await GroupModel.create({
          group_id: chat.id,
          group_name: chat.title,
          date_created: new Date(),
        });
        this.reload(chat.id);
      }
    }
  }
  async currentPidorOfTheDay(group_id: number) {
    const info = await InfoModel.findOne({ group_id })
      .sort({ date_created: -1 })
      .limit(1);

    if (!info) {
      return false;
    }
    if (!info?.currentPidor) {
      return false;
    }
    const user = await UserModel.findOne({
      user_id: info.currentPidor,
      group_id,
    });

    return user;
  }
  async getPidorOfTheDay(group_id: number) {
    const user = await UserModel.findOne({ role: "pidor", group_id });
    await InfoModel.findOneAndUpdate(
      { group_id: user?.group_id },
      { currentPidor: user?.user_id },
      { sort: { date_created: -1 }, upsert: true, new: true }
    );
    return user;
  }

  async currentCoolOfTheDay(group_id: number) {
    const info = await InfoModel.findOne({ group_id })
      .sort({ date_created: -1 })
      .limit(1);

    if (!info) {
      return false;
    }
    if (!info?.currentCool) {
      return false;
    }
    const user = await UserModel.findOne({
      user_id: info.currentCool,
      group_id,
    });

    return user;
  }
  async getCoolOfTheDay(group_id: number) {
    const user = await UserModel.findOne({ role: "cool", group_id });
    await InfoModel.findOneAndUpdate(
      { group_id: user?.group_id },
      { currentCool: user?.user_id },
      { sort: { date_created: -1 }, upsert: true, new: true }
    );
    return user;
  }

  async createUser(ctx: any) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const existingUser = await UserModel.findOne({
        user_id: ctx.from?.id,
      });
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
      if (existingUser) {
        return existingUser;
      }

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const newUser = await UserModel.create({
        group_id: ctx.chat.id,
        group_name: ctx.chat.title,
        user_id: ctx.from?.id,
        first_name: ctx.from?.first_name,
        last_name: ctx.from?.last_name,
        username: ctx.from?.username,
      });
      return newUser;
    } catch (e) {
      console.error(e);
      throw e; // –ü—Ä–æ–±—Ä–æ—Å–∏–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –µ–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    }
  }
  async deleteUser(ctx: any) {
    await UserModel.findOneAndDelete({
      user_id: ctx.from?.id,
      group_id: ctx.chat.id,
    });
  }

  async reload(group_id: number) {
    return await InfoModel.create({
      currentPidor: null,
      currentCool: null,
      group_id,
    });
  }

  async reloadAll() {
    const groups = await GroupModel.find();
    for (const group of groups) {
      await this.reload(group.group_id);
    }
  }
}
